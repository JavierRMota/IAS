00001010 LOAD MQ
00001001 LOAD MQ,M(X)
00100001 STOR M(X)
00000001 LOAD M(X)
00000010 LOAD M(X)
00000011 LOAD |M(X)|
00000100 LOAD |M(X)|
00001101 JUMP M(X,0:19) Take next instruction from left half of M(X)
00001110 JUMP M(X,20:39) Take next instruction from right half of M(X)
00001111 JUMP M(X,0:19) if ACC + JUMP left half of M(X)
00010000 JUMP M(X,20:39) if ACC + JUMP  right half of M(X)

00000101 ADD M(X) Add M(X) to AC; put the result in AC
00000111 ADD |M(X)| Add |M(X)| to AC; put the result in AC
00000110 SUB M(X) Subtract M(X) from AC; put the result in AC
00001000 SUB |M(X)| Subtract |M(X)| from AC; put the remainder in AC
00001011 MUL M(X) Multiply M(X) by MQ; put most significant bits of result
in AC, put least significant bits in MQ
00001100 DIV M(X) Divide AC by M(X); put the quotient in MQ and the
remainder in AC
00010100 LSH Multiply accumulator by 2; i.e., shift left one bit position
00010101 RSH Divide accumulator by 2; i.e., shift right one position
00010010 STOR M(X,8:19) Replace left address field at M(X) by 12 rightmost bits
of AC
00010011 STOR M(X,28:39) Replace right address field at M(X) by 12 rightmost
bits of AC
